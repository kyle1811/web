@{
    ViewBag.Title = "KSIS(KCC E&C SMART INFORMATION SYSTEM)";
}

<!-- 콘텐츠 -->
<div id="contents">
        <!-- 검색 및 버튼박스 -->
        <br>
        <div class="box_search3">
            <a id="btn_search1" class="btn1">전  체</a>
            <a id="btn_search2" class="btn1">토  목</a>
            <a id="btn_search3" class="btn1">건  축</a>
            <a id="btn_search4" class="btn1">플랜트</a>
            &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;
            <span> 현장명  </span> <input type="text" id="TxtSubject" name="TxtSubject">
            <a id="btn_search" class="btn1">검 색</a>
        </div>




        <div id="map" class="map" style="height:800px;">
        </div>

            </div>
            <!-- //콘텐츠 -->
            @*<td class="td_center" rowspan="2" style ="border-top:1px solid #d8d8d8;border-bottom:1px solid #d8d8d8;border-left:1px solid #d8d8d8;">
            <img src="~/Contents/images/icon/11.gif" style="width:60px;height:60px;"/></td>
        <td class="td_left" style="font-size:15px;overflow:hidden;border-top:1px solid #d8d8d8;vertical-align:bottom;">14시 현재</td>*@



            <script type="text/javascript">

                // 페이지 로드 시
                $(document).ready(function (e) {
                    CreateMap();
                });

                //현장좌표 조회
                function GetSiteCoordinates() {
                    // 그래프 키값 숫자형 처리된 데이터를 담기위한 변수
                    var jsonData = [];
                    $.ajax({
                        type: "POST",
                        url: "/AjaxAuth/GetSiteCoordinates",
                        dataType: "json",
                        async: false,   // 동기식 처리
                        success: function (data) {
                            // Json 데이터 y축 그래프 값 숫자형 처리
                            for (i = 0; i < data.length; i++) {
                                //data.length; i++) {
                                var arrData = {};
                                arrData.content = data[i].ProjectNm;
                                arrData.latlng = new daum.maps.LatLng(data[i].Latitude, data[i].Longitude);
                                arrData.ProjectId = data[i].ProjectId;
                                arrData.BizPartCd = data[i].BizPartCd;
                                jsonData.push(arrData);
                            }
                        },
                        error: function (e) {
                            alert("에러 발생.");
                            return false;
                        }
                    });

                    return jsonData;
                }

                function GetSiteCoordinatesSearch(pStieNm) {
                    // 그래프 키값 숫자형 처리된 데이터를 담기위한 변수
                    var jsonData = [];
                    $.ajax({
                        type: "POST",
                        url: "/AjaxAuth/GetSiteCoordinatesSearch",
                        dataType: "json",
                        data: { "pStieNm": pStieNm },
                        async: false,   // 동기식 처리
                        success: function (data) {
                            // Json 데이터 y축 그래프 값 숫자형 처리
                            for (i = 0; i < data.length; i++) {
                                //data.length; i++) {
                                var arrData1 = {};
                                arrData1.content = data[i].ProjectNm;
                                arrData1.latlng = new daum.maps.LatLng(data[i].Latitude, data[i].Longitude);
                                arrData1.ProjectId = data[i].ProjectId;
                                arrData1.BizPartCd = data[i].BizPartCd;
                                jsonData.push(arrData1);
                            }
                        },
                        error: function (e) {
                            alert("에러 발생.");
                            return false;
                        }
                    });

                    return jsonData;
                }

                function GetSiteCoordinatesGubun(pGubun) {
                    // 그래프 키값 숫자형 처리된 데이터를 담기위한 변수
                    var jsonData = [];
                    $.ajax({
                        type: "POST",
                        url: "/AjaxAuth/GetSiteCoordinatesGubun",
                        dataType: "json",
                        data: { "pGubun": pGubun },
                        async: false,   // 동기식 처리
                        success: function (data) {
                            // Json 데이터 y축 그래프 값 숫자형 처리
                            for (i = 0; i < data.length; i++) {
                                //data.length; i++) {
                                var arrData = {};
                                arrData.content = data[i].ProjectNm;
                                arrData.latlng = new daum.maps.LatLng(data[i].Latitude, data[i].Longitude);
                                arrData.ProjectId = data[i].ProjectId;
                                arrData.BizPartCd = data[i].BizPartCd;
                                jsonData.push(arrData);
                            }
                        },
                        error: function (e) {
                            alert("에러 발생.");
                            return false;
                        }
                    });

                    return jsonData;
                }



                // 조회버튼 클릭 이벤트
                $(document).on("click", "#btn_search", function (e) {
                    if ($("#TxtSubject").val() == "") {
                        alert("검색어를 입력하세요");
                        $("#TxtSubject").focus();
                        return false;
                    }
                    CreateMapSearch();

                });




                function CreateMap() {

                    var mapContainer = document.getElementById('map'), // 지도를 표시할 div
                        mapOption = {

                            center: new daum.maps.LatLng(36.37317, 127.599762), // 지도의 중심좌표
                            level: 13 // 지도의 확대 레벨
                        };

                    var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다

                    // 마커를 표시할 위치와 내용을 가지고 있는 객체 배열입니다

                    var positions = GetSiteCoordinates()


                    var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다
                                       

                    // 일반 지도와 스카이뷰로 지도 타입을 전환할 수 있는 지도타입 컨트롤을 생성합니다
                    var mapTypeControl = new daum.maps.MapTypeControl();

                    // 지도에 컨트롤을 추가해야 지도위에 표시됩니다
                    // daum.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미합니다
                    map.addControl(mapTypeControl, daum.maps.ControlPosition.TOPRIGHT);

                    map.setDraggable(true);
                    map.setZoomable(true);


                    var zoomControl = new daum.maps.ZoomControl();
                    map.addControl(zoomControl, daum.maps.ControlPosition.RIGHT);

                    for (var i = 0; i < positions.length; i++) {
                        // 마커를 생성합니다
                        var marker = new daum.maps.Marker({
                            map: map, // 마커를 표시할 지도
                            position: positions[i].latlng // 마커의 위치
                        });

                        // 마커에 표시할 인포윈도우를 생성합니다
                        var infowindow = new daum.maps.InfoWindow({
                            content: positions[i].content // 인포윈도우에 표시할 내용
                        });

                        // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다
                        // 이벤트 리스너로는 클로저를 만들어 등록합니다
                        // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다

                        //infowindow.open(map, marker); // 무조건 현장 이름 떠있게 처리




                        // 무조건 현장 이름 떠있게 처리 위해 주석
                        daum.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));
                        daum.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));

                        daum.maps.event.addListener(marker, 'click', move(positions[i].BizPartCd, positions[i].ProjectId));
                    }

                }

                function CreateMapCivil() {

                    var mapContainer = document.getElementById('map'), // 지도를 표시할 div
                        mapOption = {

                            center: new daum.maps.LatLng(36.37317, 127.599762), // 지도의 중심좌표
                            level: 13 // 지도의 확대 레벨
                        };
                    var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다
                    var positions = GetSiteCoordinatesGubun("A")
                    for (var i = 0; i < positions.length; i++) {
                        // 마커를 생성합니다
                        var marker = new daum.maps.Marker({
                            map: map, // 마커를 표시할 지도
                            position: positions[i].latlng // 마커의 위치
                        });

                        // 마커에 표시할 인포윈도우를 생성합니다
                        var infowindow = new daum.maps.InfoWindow({
                            content: positions[i].content // 인포윈도우에 표시할 내용
                        });

                        //infowindow.open(map, marker); // 무조건 현장 이름 떠있게 처리

                        daum.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));
                        daum.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));

                        daum.maps.event.addListener(marker, 'click', move(positions[i].BizPartCd, positions[i].ProjectId));
                    }
                }


                function CreateMapConstruct() {

                    var mapContainer = document.getElementById('map'), // 지도를 표시할 div
                        mapOption = {

                            center: new daum.maps.LatLng(36.37317, 127.599762), // 지도의 중심좌표
                            level: 13 // 지도의 확대 레벨
                        };
                    var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다
                    var positions = GetSiteCoordinatesGubun("B")
                    for (var i = 0; i < positions.length; i++) {
                        // 마커를 생성합니다
                        var marker = new daum.maps.Marker({
                            map: map, // 마커를 표시할 지도
                            position: positions[i].latlng // 마커의 위치
                        });

                        // 마커에 표시할 인포윈도우를 생성합니다
                        var infowindow = new daum.maps.InfoWindow({
                            content: positions[i].content // 인포윈도우에 표시할 내용
                        });

                        //infowindow.open(map, marker); // 무조건 현장 이름 떠있게 처리
                        daum.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));
                        daum.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));

                        daum.maps.event.addListener(marker, 'click', move(positions[i].BizPartCd, positions[i].ProjectId));
                    }
                }

                function CreateMapPlant() {

                    var mapContainer = document.getElementById('map'), // 지도를 표시할 div
                        mapOption = {

                            center: new daum.maps.LatLng(36.37317, 127.599762), // 지도의 중심좌표
                            level: 13 // 지도의 확대 레벨
                        };
                    var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다
                    var positions = GetSiteCoordinatesGubun("D")
                    for (var i = 0; i < positions.length; i++) {
                        // 마커를 생성합니다
                        var marker = new daum.maps.Marker({
                            map: map, // 마커를 표시할 지도
                            position: positions[i].latlng // 마커의 위치
                        });

                        // 마커에 표시할 인포윈도우를 생성합니다
                        var infowindow = new daum.maps.InfoWindow({
                            content: positions[i].content // 인포윈도우에 표시할 내용
                        });

                        //infowindow.open(map, marker); // 무조건 현장 이름 떠있게 처리

                        daum.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));
                        daum.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));

                        daum.maps.event.addListener(marker, 'click', move(positions[i].BizPartCd, positions[i].ProjectId));
                    }
                }


                function CreateMapSearch() {

                    var mapContainer = document.getElementById('map'), // 지도를 표시할 div
                        mapOption = {

                            center: new daum.maps.LatLng(36.37317, 127.599762), // 지도의 중심좌표
                            level: 13 // 지도의 확대 레벨
                        };

                    var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다

                    // 마커를 표시할 위치와 내용을 가지고 있는 객체 배열입니다

                    var positions = GetSiteCoordinatesSearch($("#TxtSubject").val())


                    for (var i = 0; i < positions.length; i++) {
                        // 마커를 생성합니다
                        var marker = new daum.maps.Marker({
                            map: map, // 마커를 표시할 지도
                            position: positions[i].latlng // 마커의 위치
                        });

                        // 마커에 표시할 인포윈도우를 생성합니다
                        var infowindow = new daum.maps.InfoWindow({
                            content: positions[i].content // 인포윈도우에 표시할 내용
                        });

                        // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다
                        // 이벤트 리스너로는 클로저를 만들어 등록합니다
                        // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다

                        //infowindow.open(map, marker); // 무조건 현장 이름 떠있게 처리

                        // 무조건 현장 이름 떠있게 처리 위해 주석
                        daum.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));
                        daum.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));

                        daum.maps.event.addListener(marker, 'click', move(positions[i].BizPartCd, positions[i].ProjectId));
                    }

                }

                // 인포윈도우를 표시하는 클로저를 만드는 함수입니다
                function makeOverListener(map, marker, infowindow) {
                    return function () {
                        infowindow.open(map, marker);
                    };
                }

                function move(BizPartCd, ProjectId) {
                    return function () {
                        location.href = "/Site/SiteStateDetail?pBizPartCd=" + BizPartCd + "&pSiteCd=" + ProjectId;
                    };
                }

                // 인포윈도우를 닫는 클로저를 만드는 함수입니다
                function makeOutListener(infowindow) {
                    return function () {
                        infowindow.close();
                    };
                }


                // 검색박스 엔터 이벤트
                $(document).on("keypress", "#TxtSubject", function (e) {
                    if (e.which == 13) {
                        $("#btn_search").trigger("click");
                        return false;
                    }
                });


                //전체 조회 클릭 이벤트
                $(document).on("click", "#btn_search1", function (e) {
                    CreateMap();
                });


                //토목 조회 클릭 이벤트
                $(document).on("click", "#btn_search2", function (e) {
                    CreateMapCivil();
                });

                //토목 조회 클릭 이벤트
                $(document).on("click", "#btn_search3", function (e) {
                    CreateMapConstruct();
                });

                //토목 조회 클릭 이벤트
                $(document).on("click", "#btn_search4", function (e) {
                    CreateMapPlant();
                });


            </script>
