@{
    Layout = null;
    ViewBag.Title = "KSIS(KCC E&C SMART INFORMATION SYSTEM)";
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewBag.Title</title>
    <!-- 인코딩 -->
    <meta http-equiv="Contents-Type" content="text/html" charset="utf-8" />
    <!-- 문서모드 -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <!-- 파비콘 -->
    <link rel="shortcut icon" type="image/x-icon" href="/Contents/images/favicon.ico" />
    <!-- css -->
    <link rel="stylesheet" type="text/css" href="/Contents/css/common.css" />
    <link rel="stylesheet" type="text/css" href="/Contents/css/portal.css" />

    <!-- script -->
    <script type="text/javascript" src="/Contents/js/common.js"></script>
    <script type="text/javascript" src="/Contents/js/component.js"></script>
    <script type="text/javascript" src="/Contents/js/jquery-1.9.1.min.js"></script>
    <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=4cde394900a01fc186534dbd6bdd20c0"></script>

</head>
<body>
    <div id="map" class="map" style="width:2000px;height:1200px;">
    </div>

    <script type="text/javascript">

        // 페이지 로드 시
        $(document).ready(function (e) {
            CreateMap();
        });

        //현장좌표 조회
        function GetSiteCoordinates() {
            // 그래프 키값 숫자형 처리된 데이터를 담기위한 변수
            var jsonData = [];
            $.ajax({
                type: "POST",
                url: "/AjaxAuth/GetSiteCoordinates",
                dataType: "json",
                async: false,   // 동기식 처리
                success: function (data) {
                    // Json 데이터 y축 그래프 값 숫자형 처리
                    for (i = 0; i < data.length; i++) {
                        //data.length; i++) {
                        var arrData = {};
                        arrData.content = data[i].ProjectNm;
                        arrData.latlng = new daum.maps.LatLng(data[i].Latitude, data[i].Longitude);
                        arrData.ProjectId = data[i].ProjectId;
                        arrData.BizPartCd = data[i].BizPartCd;
                        jsonData.push(arrData);
                    }
                },
                error: function (e) {
                    alert("에러 발생.");
                    return false;
                }
            });

            return jsonData;
        }


        function CreateMap() {

            var mapContainer = document.getElementById('map'), // 지도를 표시할 div
                mapOption = {

                    center: new daum.maps.LatLng(36.37317, 127.599762), // 지도의 중심좌표
                    level: 13 // 지도의 확대 레벨
                };

            var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다

            // 마커를 표시할 위치와 내용을 가지고 있는 객체 배열입니다

            var positions = GetSiteCoordinates()


            var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다

            // 일반 지도와 스카이뷰로 지도 타입을 전환할 수 있는 지도타입 컨트롤을 생성합니다
            var mapTypeControl = new daum.maps.MapTypeControl();

            // 지도에 컨트롤을 추가해야 지도위에 표시됩니다
            // daum.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미합니다
            map.addControl(mapTypeControl, daum.maps.ControlPosition.TOPRIGHT);

            map.setDraggable(false);
            map.setZoomable(false);




            var zoomControl = new daum.maps.ZoomControl();
            map.addControl(zoomControl, daum.maps.ControlPosition.RIGHT);

            for (var i = 0; i < positions.length; i++) {
                // 마커를 생성합니다
                var marker = new daum.maps.Marker({
                    map: map, // 마커를 표시할 지도
                    position: positions[i].latlng // 마커의 위치
                });

                // 마커에 표시할 인포윈도우를 생성합니다
                var infowindow = new daum.maps.InfoWindow({
                    content: positions[i].content // 인포윈도우에 표시할 내용
                });

                // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다
                // 이벤트 리스너로는 클로저를 만들어 등록합니다
                // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다

                //infowindow.open(map, marker); // 무조건 현장 이름 떠있게 처리




                // 무조건 현장 이름 떠있게 처리 위해 주석
                daum.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));
                daum.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));

                daum.maps.event.addListener(marker, 'click', move(positions[i].BizPartCd, positions[i].ProjectId));
            }

        }

        // 인포윈도우를 표시하는 클로저를 만드는 함수입니다
        function makeOverListener(map, marker, infowindow) {
            return function () {
                infowindow.open(map, marker);
            };
        }

        function move(BizPartCd, ProjectId) {
            return function () {
                location.href = "/Site/SiteStateDetail?pBizPartCd=" + BizPartCd + "&pSiteCd=" + ProjectId;
            };
        }

        // 인포윈도우를 닫는 클로저를 만드는 함수입니다
        function makeOutListener(infowindow) {
            return function () {
                infowindow.close();
            };
        }


    </script>
</body>
</html>

